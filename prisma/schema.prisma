// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?           @unique
  admin               Boolean?
  firstName           String?
  lastName            String?
  image               String?
  emailVerified       DateTime?         @map("email_verified")
  infoCompleted       Boolean?
  info                Info?
  accounts            Account[]
  sessions            Session[]
  updatedAt           DateTime?         @updatedAt
  createdAt           DateTime?         @default(now())
}

model Info {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId   String    @unique @db.ObjectId
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio      String?
  location String?
  website  String?
  birthday DateTime?
  resume   Resume?
}

model Resume {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  infoId    String   @unique @db.ObjectId
  info      Info     @relation(fields: [infoId], references: [id], onDelete: Cascade)
  title     String?
  summary   String?
  skills    String[]
  education String[]
  work      String[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
